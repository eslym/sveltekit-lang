<script module>
// This 

import { createSubscriber } from 'svelte/reactivity';

function tryLangs(langs, candidates, path) {
    for (const lang of langs) {
        if( lang in candidates ) {
            return candidates[lang];
        }
    }
    throw new Error(`Languages ${langs.join(', ')} not found in ${path}`);
}

export const availableLangs = {{{ availableLangs }}};
export const defaultLocale = {{{ defaultLocale }}};

export class Localize {
    #lang = defaultLocale;

    #tryLangs = (lang) => {
        if (availableLangs.includes(lang)) {
            return [lang, defaultLocale];
        }
        return [defaultLocale];
    };

    #tries = this.#tryLangs(this.#lang);

    #translations = undefined;
    #snippets = undefined;

    #langNotify = undefined;
    #langSub = createSubscriber((update) => {
        this.#langNotify = update;
        return () => {
            this.#langNotify = undefined;
        };
    });
    
    #keysMap = new Map([{{{ keysMapping }}}]);
    #snippetsMap = new Map([{{{ snippetsMapping }}}]);

    get lang() {
        this.#langSub();
        return this.#lang;
    }

    set lang(lang) {
        if (this.#lang === lang) {
            return;
        }
        this.#lang = lang;
        this.#tries = this.#tryLangs(lang);
        this.#langNotify?.();
    }

    get translations() {
        return this.#translations;
    }

    get snippets() {
        return this.#snippets;
    }

    get get() {
        this.#langSub();
        return this.#get
    }

    get snippet() {
        this.#langSub();
        return this.#snippet
    }

    constructor() {
        this.#translations = {{{ translations }}};
        this.#snippets = {{{  svelteSnippetStruct }}};
    }

    tryLangs(callback) {
        this.#tryLangs = callback;
        this.#tries = this.#tryLangs(this.#lang);
        this.#langNotify?.();
        return this;
    }

    #get(key, params) {
        if(this.#keysMap.has(key)) {
            return this.#keysMap.get(key)(this.#translations)(params);
        }
        throw new Error(`Key ${key} not found in translations`);
    }

    #snippet(key) {
        if(this.#snippetsMap.has(key)) {
            return this.#snippetsMap.get(key)(this.#snippets);
        }
        throw new Error(`Key ${key} not found in translations`);
    }

    #wrapReactive(path, candidates) {
        const sub = this.#langSub;
        const tries = () => this.#tries;
        return {
            get() {
                sub();
                return tryLangs(tries(), candidates, path);
            },
        }
    }
}

</script>

{#snippet var_helper(value, param) }
    {#if value instanceof Function }
        {@render value(param, var_helper) }
    {:else}
        {value}
    {/if}
{/snippet}

{{{ snippets }}}
