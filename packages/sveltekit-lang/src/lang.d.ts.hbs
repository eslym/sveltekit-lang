declare module {{{ alias }}} {
    import type { Snippet } from 'svelte';
    
    type Param = string | number | { toString(): string };
    type FormatFn = (value: Param) => string;

    type SnippetParam = Param | Snippet<[]>;
    type SnippetFormatFn = Snippet<[value: any, helper: Snippet<[value: any, param?: any]>]>;

    export type AvailableLang = {{{ availableLangs }}};

    export const availableLangs: AvailableLang[];
    export const defaultLocale = {{{ defaultLocale }}} satisfies AvailableLang;

    type Translations = {{{ translationsType }}};
    type Snippets = {{{ snippetsType }}};

    type KeyMapping = {{{ translationMapping }}};
    type SnippetMapping = {{{ snippetMapping }}};

    export type TranslationKeys = keyof KeyMapping;

    export class Localize {
        public lang: string;
        public readonly translations: Translations;
        public readonly snippets: Snippets;

        tryLangs(resolve: (lang: string) => [AvailableLang, ...AvailableLang[]]): this;

        get<K extends TranslationKeys>(key: K, ...args: KeyMapping[K]): string;
        snippet<K extends keyof SnippetMapping>(key: K): Snippet<SnippetMapping[K]>;

        pick<T extends Record<AvailableLang, any>>(candidates: T): T[AvailableLang];
    }
}
